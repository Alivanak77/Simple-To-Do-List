# Simple To-Do List - Day 4

tasks = []

# بارگذاری تسک‌ها از فایل
def load_tasks():
    try:
        with open("tasks.txt", "r") as file:
            global tasks
            tasks = [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        tasks = []

# ذخیره تسک‌ها در فایل
def save_tasks():
    with open("tasks.txt", "w") as file:
        for task in tasks:
            file.write(task + "\n")

def add_task(task):
    tasks.append(task)
    save_tasks()
    print(f"Added: {task}")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return

    print("\nTo-Do List:")
    for idx, task in enumerate(tasks, start=1):
        print(f"{idx}. {task}")

def remove_task(index):
    try:
        index = int(index) - 1
        if 0 <= index < len(tasks):
            removed = tasks.pop(index)
            save_tasks()
            print(f"Removed: {removed}")
        else:
            print("Invalid task number!")
    except ValueError:
        print("Please enter a valid number!")

def edit_task(index, new_task):
    try:
        index = int(index) - 1
        if 0 <= index < len(tasks):
            tasks[index] = new_task
            save_tasks()
            print(f"Task updated: {new_task}")
        else:
            print("Invalid task number!")
    except ValueError:
        print("Please enter a valid number!")

# اجرای اولیه
load_tasks()
add_task("Refactor GitHub project")
add_task("Practice coding")
show_tasks()

edit_task(2, "Complete Python project")
show_tasks()
from datetime import datetime

tasks = []

def load_tasks():
    try:
        with open("tasks.txt", "r") as file:
            global tasks
            tasks = [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        tasks = []

def save_tasks():
    with open("tasks.txt", "w") as file:
        for task in tasks:
            file.write(task + "\n")

def add_task(task):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    task_with_time = f"{task} (added: {timestamp})"
    tasks.append(task_with_time)
    save_tasks()
    print(f"Added: {task_with_time}")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    print("\nTo-Do List:")
    for idx, task in enumerate(tasks, start=1):
        print(f"{idx}. {task}")

# اجرا
load_tasks()
add_task("Start new side project")
show_tasks()
tasks = {}

def load_tasks():
    try:
        with open("tasks.txt", "r") as file:
            global tasks
            tasks = {line.split(" | ")[0]: line.strip().split(" | ")[1] for line in file.readlines()}
    except FileNotFoundError:
        tasks = {}

def save_tasks():
    with open("tasks.txt", "w") as file:
        for task, status in tasks.items():
            file.write(f"{task} | {status}\n")

def add_task(task):
    tasks[task] = "❌ Not Done"
    save_tasks()
    print(f"Added: {task}")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    print("\nTo-Do List:")
    for idx, (task, status) in enumerate(tasks.items(), start=1):
        print(f"{idx}. {task} - {status}")

def toggle_task(index):
    task_list = list(tasks.keys())
    if 0 <= index - 1 < len(task_list):
        task = task_list[index - 1]
        tasks[task] = "✅ Done" if tasks[task] == "❌ Not Done" else "❌ Not Done"
        save_tasks()
        print(f"Updated: {task} -> {tasks[task]}")
    else:
        print("Invalid task number!")

# اجرا
load_tasks()
add_task("Learn Python")
add_task("Build a project")
show_tasks()

toggle_task(1)
show_tasks()

tasks = {}

def load_tasks():
    try:
        with open("tasks.txt", "r") as file:
            global tasks
            tasks = {line.split(" | ")[0]: line.strip().split(" | ")[1] for line in file.readlines()}
    except FileNotFoundError:
        tasks = {}

def save_tasks():
    with open("tasks.txt", "w") as file:
        for task, status in tasks.items():
            file.write(f"{task} | {status}\n")

def add_task(task):
    tasks[task] = "❌ Not Done"
    save_tasks()
    print(f"Added: {task}")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    print("\nTo-Do List:")
    for idx, (task, status) in enumerate(tasks.items(), start=1):
        print(f"{idx}. {task} - {status}")

def remove_tasks(indices):
    task_list = list(tasks.keys())
    for index in sorted(indices, reverse=True):
        if 0 <= index - 1 < len(task_list):
            removed_task = task_list[index - 1]
            del tasks[removed_task]
            print(f"Removed: {removed_task}")
    save_tasks()

# اجرا
load_tasks()
add_task("Read a book")
add_task("Write a blog post")
add_task("Go for a walk")
show_tasks()

remove_tasks([1, 3])
show_tasks()
import os
import platform
import time

tasks = []

def play_sound():
    if platform.system() == "Windows":
        import winsound
        winsound.Beep(1000, 500)
    else:
        os.system("afplay /System/Library/Sounds/Glass.aiff" if platform.system() == "Darwin" else "echo -e '\a'")

def add_task(task):
    tasks.append(task)
    play_sound()
    print(f"Added: {task}")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    print("\nTo-Do List:")
    for idx, task in enumerate(tasks, start=1):
        print(f"{idx}. {task}")

# اجرا
add_task("Finish homework")
add_task("Go grocery shopping")
show_tasks()
import time
import threading

tasks = []

def add_task(task, reminder_time):
    tasks.append((task, reminder_time))
    print(f"Added: {task} (Reminder in {reminder_time} seconds)")
    threading.Thread(target=reminder, args=(task, reminder_time)).start()

def reminder(task, reminder_time):
    time.sleep(reminder_time)
    print(f"⏰ Reminder: {task}")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    print("\nTo-Do List:")
    for idx, (task, reminder_time) in enumerate(tasks, start=1):
        print(f"{idx}. {task} (in {reminder_time} seconds)")

# تست
add_task("Submit project", 5)
add_task("Call friend", 10)
show_tasks()

# جلوگیری از بسته شدن برنامه تا زمان یادآوری
time.sleep(15)
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date))
    print(f"Added: {task} (Due: {due_date})")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    print("\nTo-Do List with Due Dates:")
    for idx, (task, due_date) in enumerate(tasks, start=1):
        print(f"{idx}. {task} - Due: {due_date}")

# تست
add_task("Finish report", datetime(2025, 2, 25))                                                                                                                                
add_task("Prepare for meeting", datetime(2025, 3, 1))
show_tasks()
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date))
    tasks.sort(key=lambda x: x[1])
    print(f"Added: {task} (Due: {due_date})")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    print("\nTo-Do List (Sorted by Due Date):")
    for idx, (task, due_date) in enumerate(tasks, start=1):
        print(f"{idx}. {task} - Due: {due_date}")

# تست
add_task("Submit project", datetime(2025, 2, 25))
add_task("Prepare for meeting", datetime(2025, 3, 1))
add_task("Doctor's appointment", datetime(2025, 2, 20))
show_tasks()
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date))
    tasks.sort(key=lambda x: x[1])
    print(f"Added: {task} (Due: {due_date})")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    
    print("\nTo-Do List (Sorted by Due Date):")
    now = datetime.now()
    for idx, (task, due_date) in enumerate(tasks, start=1):
        status = "⏳ Upcoming" if due_date >= now else "❗ Overdue"
        print(f"{idx}. {task} - Due: {due_date} ({status})")

# تست
add_task("Submit project", datetime(2025, 2, 25))
add_task("Doctor's appointment", datetime(2025, 2, 18))
add_task("Prepare for meeting", datetime(2025, 3, 1))
show_tasks()
٫from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date))
    tasks.sort(key=lambda x: x[1])
    print(f"Added: {task} (Due: {due_date})")

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    
    print("\nTo-Do List (Sorted by Due Date):")
    now = datetime.now()
    for idx, (task, due_date) in enumerate(tasks, start=1):
        status = "⏳ Upcoming" if due_date >= now else "❗ Overdue"
        print(f"{idx}. {task} - Due: {due_date} ({status})")

def remove_task(index):
    if 1 <= index <= len(tasks):
        removed_task = tasks.pop(index - 1)
        print(f"Removed: {removed_task[0]}")
    else:
        print("Invalid task number!")

# تست
add_task("Submit project", datetime(2025, 2, 25))
add_task("Doctor's appointment", datetime(2025, 2, 18))
add_task("Prepare for meeting", datetime(2025, 3, 1))
show_tasks()

# حذف تسک شماره 2
remove_task(2)
show_tasks()
import json
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date.isoformat()))
    tasks.sort(key=lambda x: x[1])
    print(f"Added: {task} (Due: {due_date})")
    save_tasks()

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    
    print("\nTo-Do List (Sorted by Due Date):")
    now = datetime.now()
    for idx, (task, due_date) in enumerate(tasks, start=1):
        due_date = datetime.fromisoformat(due_date)
        status = "⏳ Upcoming" if due_date >= now else "❗ Overdue"
        print(f"{idx}. {task} - Due: {due_date} ({status})")

def remove_task(index):
    if 1 <= index <= len(tasks):
        removed_task = tasks.pop(index - 1)
        print(f"Removed: {removed_task[0]}")
        save_tasks()
    else:
        print("Invalid task number!")

def save_tasks():
    with open("tasks.json", "w") as file:
        json.dump(tasks, file)

def load_tasks():
    global tasks
    try:
        with open("tasks.json", "r") as file:
            tasks = json.load(file)
    except FileNotFoundError:
        tasks = []

# تست
load_tasks()
add_task("Submit project", datetime(2025, 2, 25))
add_task("Doctor's appointment", datetime(2025, 2, 18))
show_tasks()

# حذف تسک
remove_task(1)
show_tasks()import json
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date.isoformat()))
    tasks.sort(key=lambda x: x[1])
    print(f"Added: {task} (Due: {due_date})")
    save_tasks()

def show_tasks():
    if not tasks:
        print("\nTo-Do List is empty!")
        return
    
    print("\nTo-Do List (Sorted by Due Date):")
    now = datetime.now()
    for idx, (task, due_date) in enumerate(tasks, start=1):
        due_date = datetime.fromisoformat(due_date)
        status = "⏳ Upcoming" if due_date >= now else "❗ Overdue"
        print(f"{idx}. {task} - Due: {due_date} ({status})")

def remove_task(index):
    if 1 <= index <= len(tasks):
        removed_task = tasks.pop(index - 1)
        print(f"Removed: {removed_task[0]}")
        save_tasks()
    else:
        print("Invalid task number!")

def edit_task(index, new_task, new_due_date):
    if 1 <= index <= len(tasks):
        tasks[index - 1] = (new_task, new_due_date.isoformat())
        print(f"Task {index} updated to: {new_task} (Due: {new_due_date})")
        save_tasks()
    else:
        print("Invalid task number!")

def save_tasks():
    with open("tasks.json", "w") as file:
        json.dump(tasks, file)

def load_tasks():
    global tasks
    try:
        with open("tasks.json", "r") as file:
            tasks = json.load(file)
    except FileNotFoundError:
        tasks = []

# تست
load_tasks()
add_task("Submit project", datetime(2025, 2, 25))
add_task("Doctor's appointment", datetime(2025, 2, 18))
show_tasks()

# ویرایش تسک شماره ۱
edit_task(1, "Submit final report", datetime(2025, 2, 28))
show_tasks()
import json
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date.isoformat()))
    tasks.sort(key=lambda x: x[1])
    save_tasks()

def show_tasks(filter_type=None):
    now = datetime.now()
    filtered_tasks = tasks
    
    if filter_type == "upcoming":
        filtered_tasks = [task for task in tasks if datetime.fromisoformat(task[1]) >= now]
    elif filter_type == "overdue":
        filtered_tasks = [task for task in tasks if datetime.fromisoformat(task[1]) < now]
    
    if not filtered_tasks:
        print("\nNo tasks found!")
        return
    
    print("\nTo-Do List:")
    for idx, (task, due_date) in enumerate(filtered_tasks, start=1):
        due_date = datetime.fromisoformat(due_date)
        print(f"{idx}. {task} - Due: {due_date}")

def save_tasks():
    with open("tasks.json", "w") as file:
        json.dump(tasks, file)

def load_tasks():
    global tasks
    try:
        with open("tasks.json", "r") as file:
            tasks = json.load(file)
    except FileNotFoundError:
        tasks = []

# تست
load_tasks()
add_task("Finish report", datetime(2025, 2, 25))
add_task("Call dentist", datetime(2025, 2, 18))

print("\nAll Tasks:")
show_tasks()

print("\nUpcoming Tasks:")
show_tasks("upcoming")

print("\nOverdue Tasks:")
show_tasks("overdue")
import json
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date.isoformat()))
    tasks.sort(key=lambda x: x[1])
    save_tasks()

def show_tasks(filter_type=None, query=None):
    now = datetime.now()
    filtered_tasks = tasks
    
    if filter_type == "upcoming":
        filtered_tasks = [task for task in tasks if datetime.fromisoformat(task[1]) >= now]
    elif filter_type == "overdue":
        filtered_tasks = [task for task in tasks if datetime.fromisoformat(task[1]) < now]

    if query:
        filtered_tasks = [task for task in filtered_tasks if query.lower() in task[0].lower()]

    if not filtered_tasks:
        print("\nNo tasks found!")
        return
    
    print("\nTo-Do List:")
    for idx, (task, due_date) in enumerate(filtered_tasks, start=1):
        due_date = datetime.fromisoformat(due_date)
        print(f"{idx}. {task} - Due: {due_date}")

def save_tasks():
    with open("tasks.json", "w") as file:
        json.dump(tasks, file)

def load_tasks():
    global tasks
    try:
        with open("tasks.json", "r") as file:
            tasks = json.load(file)
    except FileNotFoundError:
        tasks = []

# تست
load_tasks()
add_task("Finish report", datetime(2025, 2, 25))
add_task("Call dentist", datetime(2025, 2, 18))
add_task("Submit project", datetime(2025, 2, 27))

print("\nAll Tasks:")
show_tasks()

print("\nSearch for 'report':")
show_tasks(query="report")

print("\nUpcoming Tasks with 'project':")
show_tasks("upcoming", "project")
import json
import time
import threading
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date.isoformat()))
    tasks.sort(key=lambda x: x[1])
    save_tasks()

def show_tasks(filter_type=None, query=None):
    now = datetime.now()
    filtered_tasks = tasks
    
    if filter_type == "upcoming":
        filtered_tasks = [task for task in tasks if datetime.fromisoformat(task[1]) >= now]
    elif filter_type == "overdue":
        filtered_tasks = [task for task in tasks if datetime.fromisoformat(task[1]) < now]

    if query:
        filtered_tasks = [task for task in filtered_tasks if query.lower() in task[0].lower()]

    if not filtered_tasks:
        print("\nNo tasks found!")
        return
    
    print("\nTo-Do List:")
    for idx, (task, due_date) in enumerate(filtered_tasks, start=1):
        due_date = datetime.fromisoformat(due_date)
        print(f"{idx}. {task} - Due: {due_date}")

def save_tasks():
    with open("tasks.json", "w") as file:
        json.dump(tasks, file)

def load_tasks():
    global tasks
    try:
        with open("tasks.json", "r") as file:
            tasks = json.load(file)
    except FileNotFoundError:
        tasks = []

def reminder():
    while True:
        now = datetime.now()
        for task, due_date in tasks:
            if datetime.fromisoformat(due_date) <= now:
                print(f"🔔 Reminder: {task} is due now!")
                tasks.remove((task, due_date))
                save_tasks()
        time.sleep(60)

# تست
load_tasks()
add_task("Finish report", datetime(2025, 2, 25, 14, 0))
add_task("Call dentist", datetime(2025, 2, 18, 16, 30))

threading.Thread(target=reminder, daemon=True).start()

print("\nAll Tasks:")
show_tasks()

print("\nUpcoming Tasks:")
show_tasks("upcoming")
import json
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date.isoformat()))
    tasks.sort(key=lambda x: x[1])
    save_tasks()

def show_tasks():
    print("\nTo-Do List:")
    for idx, (task, due_date) in enumerate(tasks, start=1):
        due_date = datetime.fromisoformat(due_date)
        print(f"{idx}. {task} - Due: {due_date}")

def save_tasks():
    with open("tasks.json", "w") as file:
        json.dump(tasks, file)

def load_tasks():
    global tasks
    try:
        with open("tasks.json", "r") as file:
            tasks = json.load(file)
    except FileNotFoundError:
        tasks = []

def edit_task(task_number, new_task, new_due_date):
    if 1 <= task_number <= len(tasks):
        tasks[task_number - 1] = (new_task, new_due_date.isoformat())
        save_tasks()
        print(f"Task {task_number} updated!")
    else:
        print("Invalid task number.")

# تست
load_tasks()
add_task("Complete blog post", datetime(2025, 2, 28))
add_task("Go grocery shopping", datetime(2025, 2, 20))

print("\nBefore editing:")
show_tasks()

edit_task(1, "Complete final project", datetime(2025, 2, 27))

print("\nAfter editing:")
show_tasks()
import json
from datetime import datetime

tasks = []

def add_task(task, due_date):
    tasks.append((task, due_date.isoformat()))
    tasks.sort(key=lambda x: x[1])
    save_tasks()

def show_tasks():
    print("\nTo-Do List:")
    for idx, (task, due_date) in enumerate(tasks, start=1):
        due_date = datetime.fromisoformat(due_date)
        print(f"{idx}. {task} - Due: {due_date}")

def save_tasks():
    with open("tasks.json", "w") as file:
        json.dump(tasks, file)

def load_tasks():
    global tasks
    try:
        with open("tasks.json", "r") as file:
            tasks = json.load(file)
    except FileNotFoundError:
        tasks = []

def edit_task(task_number, new_task, new_due_date):
    if 1 <= task_number <= len(tasks):
        tasks[task_number - 1] = (new_task, new_due_date.isoformat())
        save_tasks()
        print(f"Task {task_number} updated!")
    else:
        print("Invalid task number.")

# تست
load_tasks()
add_task("Complete blog post", datetime(2025, 2, 28))
add_task("Go grocery shopping", datetime(2025, 2, 20))

print("\nBefore editing:")
show_tasks()

edit_task(1, "Complete final project", datetime(2025, 2, 27))

print("\nAfter editing:")
show_tasks()

